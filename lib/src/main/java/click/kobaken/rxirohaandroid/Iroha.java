/*
Copyright(c) 2016 kobaken0029 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package click.kobaken.rxirohaandroid;

import java.util.List;

import javax.inject.Inject;

import click.kobaken.rxirohaandroid.di.DaggerIrohaComponent;
import click.kobaken.rxirohaandroid.di.IrohaModule;
import click.kobaken.rxirohaandroid.model.Account;
import click.kobaken.rxirohaandroid.model.Asset;
import click.kobaken.rxirohaandroid.model.BaseModel;
import click.kobaken.rxirohaandroid.model.Domain;
import click.kobaken.rxirohaandroid.model.KeyPair;
import click.kobaken.rxirohaandroid.model.TransactionHistory;
import click.kobaken.rxirohaandroid.usecase.CreateAssetUseCase;
import click.kobaken.rxirohaandroid.usecase.GetAccountUseCase;
import click.kobaken.rxirohaandroid.usecase.GetAssetsUseCase;
import click.kobaken.rxirohaandroid.usecase.GetDomainsUseCase;
import click.kobaken.rxirohaandroid.usecase.GetTransactionUseCase;
import click.kobaken.rxirohaandroid.usecase.OperateAssetUseCase;
import click.kobaken.rxirohaandroid.usecase.RegisterAccountUseCase;
import click.kobaken.rxirohaandroid.usecase.RegisterDomainUseCase;
import io.reactivex.Observable;
import okhttp3.OkHttpClient;

public class Iroha {
    private static Iroha iroha;

    @Inject
    RegisterAccountUseCase registerAccountUseCase;

    @Inject
    GetAccountUseCase getAccountUseCase;

    @Inject
    RegisterDomainUseCase registerDomainUseCase;

    @Inject
    GetDomainsUseCase getDomainsUseCase;

    @Inject
    CreateAssetUseCase createAssetUseCase;

    @Inject
    GetAssetsUseCase getAssetsUseCase;

    @Inject
    OperateAssetUseCase operateAssetUseCase;

    @Inject
    GetTransactionUseCase getTransactionUseCase;

    private Iroha(Builder builder) {
        iroha = this;

        // UnitTest時に、自動生成されたDaggerTestComponentへのReferenceが解決出来ないため
        // Test以外の場合のみInjectするようにしてある
        if (!builder.isUnitTest) {
            DaggerIrohaComponent.builder()
                    .irohaModule(new IrohaModule(builder))
                    .build()
                    .inject(this);
        }
    }

    public static class Builder {
        public String baseUrl;
        public OkHttpClient client;
        public boolean isUnitTest; // true when running unit test

        public Builder baseUrl(String baseUrl) {
            this.baseUrl = baseUrl;
            return this;
        }

        public Builder client(OkHttpClient client) {
            this.client = client;
            return this;
        }

        public Builder test(boolean isTest) {
            this.isUnitTest = isTest;
            return this;
        }

        public Iroha build() {
            if (baseUrl == null || client == null) {
                throw new NullPointerException();
            }
            return new Iroha(this);
        }
    }

    public static Iroha getInstance() {
        if (iroha == null) {
            throw new NullPointerException();
        }
        return iroha;
    }


    /* ============ 【KeyPair】 from here ============  */

    /**
     * Create KeyPair for iroha client.
     *
     * @return keypair generated by Ed25519
     */
    public static KeyPair createKeyPair() {
        return Ed25519.createKeyPair();
    }

    /**
     * Create signature for iroha.
     *
     * @param keyPair keypair generated by Ed25519
     * @param message message hashed by sha3
     * @return signature
     */
    public static String sign(KeyPair keyPair, String message) {
        return Ed25519.sign(message, keyPair);
    }

    /**
     * Confirm the message with signature.
     *
     * @param publicKey public key from keypair generated by Ed25519
     * @param signature signature
     * @param message   message hashed by sha3
     * @return true if the correct message
     */
    public static boolean verify(String publicKey, String signature, String message) {
        return Ed25519.verify(signature, message, publicKey);
    }

    /* ============ 【KeyPair】 to here ============  */


    /* ============ 【Web API】 from here ============  */

    /**
     * Register iroha account.
     *
     * @param publicKey public key from keypair generated by Ed25519
     * @param alias     account name
     * @return function of register iroha account
     */
    public Observable<Account> registerAccount(final String publicKey, final String alias) {
        return registerAccountUseCase.run(publicKey, alias);
    }

    /**
     * Find iroha account by uuid
     *
     * @param uuid iroha account id
     * @return function of find iroha account
     */
    public Observable<Account> findAccount(final String uuid) {
        return getAccountUseCase.run(uuid);
    }

    /**
     * Register domain.
     *
     * @param name      domain name
     * @param owner     domain owner
     * @param signature signature for domain
     * @return function of register domain
     */
    public Observable<Domain> registerDomain(
            final String name, final String owner, final String signature) {

        return registerDomainUseCase.run(name, owner, signature);
    }

    /**
     * Find all domains.
     *
     * @param limit  limit
     * @param offset offset
     * @return function of find all domains
     */
    public Observable<List<Domain>> findDomains(final int limit, final int offset) {
        return getDomainsUseCase.run(limit, offset);
    }

    /**
     * Create asset.
     *
     * @param name      asset name
     * @param domain    domain name associated with this asset
     * @param creator   public key from keypair generated by Ed25519 of asset creator
     * @param signature signature for asset
     * @param timestamp unix timestamp at created asset
     * @return function of create asset
     */
    public Observable<Asset> createAsset(
            final String name, final String domain, final String creator,
            final String signature, final long timestamp) {

        return createAssetUseCase.run(name, domain, creator, signature, timestamp);
    }

    /**
     * Find assets by domain name.
     *
     * @param domain domain name associated with this asset
     * @param limit  limit
     * @param offset offset
     * @return function of find assets
     */
    public Observable<List<Asset>> findAssets(
            final String domain, final int limit, final int offset) {

        return getAssetsUseCase.run(domain, limit, offset);
    }

    /**
     * Execute command on asset.
     *
     * @param assetUuid asset uuid
     * @param command   command
     * @param value     asset value
     * @param sender    public key from keypair generated by Ed25519 of asset sender
     * @param receiver  public key from keypair generated by Ed25519 of asset receiver
     * @param signature signature for this operation
     * @param timestamp unix timestamp at operated
     * @return function of operate asset
     */
    public Observable<BaseModel> operateAsset(
            final String assetUuid, final String command, final String value,
            final String sender, final String receiver, final String signature,
            final long timestamp) {

        return operateAssetUseCase.run(assetUuid, command, value, sender, receiver, signature, timestamp);
    }

    /**
     * Find transaction history by iroha account uuid.
     *
     * @param uuid   iroha account id
     * @param limit  limit
     * @param offset offset
     * @return function of find transaction history
     */
    public Observable<TransactionHistory> findTransactionHistory(
            final String uuid, final int limit, final int offset) {

        return getTransactionUseCase.run(uuid, limit, offset);
    }

    /**
     * Find transaction history by iroha account uuid and domain name and asset name.
     *
     * @param uuid   iroha account id
     * @param domain domain name
     * @param asset  asset name
     * @param limit  limit
     * @param offset offset
     * @return function of find transaction history
     */
    public Observable<TransactionHistory> findTransactionHistory(
            final String domain, final String asset, final String uuid,
            final int limit, final int offset) {

        return getTransactionUseCase.run(domain, asset, uuid, limit, offset);
    }

    /* ============ 【Web API】 to here ============  */

}
